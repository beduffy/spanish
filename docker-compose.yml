version: '3.7'

services:
  backend:
    build:
      context: ./anki_web_app
      dockerfile: Dockerfile
    container_name: spanish_anki_backend
    command: run_server # Use 'gunicorn' for production after adding it to requirements.txt
    volumes:
      - ./anki_web_app:/app # Mounts the host's anki_web_app directory to /app in the container for development (hot-reloading for Python code)
      - ./data:/app/data # Mounts the host's data directory to /app/data in the container for CSV and DB persistence
      # - db_data:/app/anki_web_app/data # Example for a named volume if you want Docker to manage it
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1 # Ensures Python output is sent straight to terminal
      # - DJANGO_SETTINGS_MODULE=spanish_anki_project.settings # If needed
    networks:
      - app_services_network

  frontend:
    build:
      context: ./anki_web_app/spanish_anki_frontend
      dockerfile: Dockerfile
      target: build-stage # Use the build-stage for development (npm run serve)
    container_name: spanish_anki_frontend
    volumes:
      - ./anki_web_app/spanish_anki_frontend:/app # Mount the entire frontend directory for hot-reloading
      # We need to mount the whole directory, not just src, because node_modules and other files are needed by `npm run serve`
      # Also, ensure .dockerignore in anki_web_app/spanish_anki_frontend/ excludes node_modules if you don't want host's node_modules to overwrite container's
    working_dir: /app # Set working directory for npm commands
    command: npm run serve
    ports:
      - "8080:8080"
    environment:
      - CHOKIDAR_USEPOLLING=true # Often needed for hot-reloading to work correctly in Docker
    depends_on:
      - backend
    networks:
      - app_services_network
  # If you decide to use a separate database container (e.g., PostgreSQL)
  # db:
  #   image: postgres:13
  #   container_name: spanish_anki_db
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data/
  #   environment:
  #     - POSTGRES_DB=your_db_name
  #     - POSTGRES_USER=your_db_user
  #     - POSTGRES_PASSWORD=your_db_password
  #   ports:
  #     - "5432:5432"

  # Named volumes (optional, Docker manages these)
  # volumes:
  #   postgres_data:
  #   db_data: # If you used the named volume for SQLite

networks:
  app_services_network:
    driver: bridge
    name: spanish_anki_app_net # Explicit name for the Docker network
