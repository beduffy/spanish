name: Django CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-22.04 # Using Ubuntu 22.04
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8] # Python version for the runner environment

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install docker-compose (V1) and compatible docker library
      run: |
        pip install --upgrade pip
        pip install "docker<6.0.0"  # Ensure compatible docker library
        pip install requests-unixsocket # Add this for http+docker support
        pip install docker-compose==1.29.2
      # Previous attempt, keeping for history:
      # run: |
      #   sudo apt-get update
      #   sudo apt-get install -y python3-pip libffi-dev python3-dev
      #   pip3 install --upgrade pip
      #   pip3 install docker-compose==1.29.2 # Use a specific V1 version
      # run: |
      #   echo "Install Docker Compose V2 (docker compose)"
      #   mkdir -p ~/.docker/cli-plugins/
      #   COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d" -f4)
      #   echo "Latest Docker Compose version: $COMPOSE_VERSION"
      #   curl -SL https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
      #   chmod +x ~/.docker/cli-plugins/docker-compose
      #   docker compose version

    - name: Install Frontend Dependencies (Node.js) & Cypress System Deps
      run: |
        echo "Installing frontend dependencies for Cypress host execution..."
        cd anki_web_app/spanish_anki_frontend
        npm install
        cd ../.. 
        echo "Frontend dependencies installed."
        echo "Installing Cypress system dependencies..."
        sudo apt-get update
        sudo apt-get install -y xvfb libnss3 libgtk-3-0 libgbm-dev libasound2

    - name: Run tests using docker-compose
      run: |
        sh ./run_all_tests.sh # This script now uses 'docker-compose'

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4.0.1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: ${{ github.repository }} 